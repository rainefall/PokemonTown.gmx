<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_placeholder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_worldObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
// hp
maxhp=100;
hp=maxhp;
// targeting
target=noone;
targeting = false;
// dojo stuff
active=true;
mydojo=noone;
cooldown=120;

data=0;
// ui stuff
showHealthbar = true;
showTrainerSettings = false;
trainerUI=0;

// ai stuff
mode=mode_auto
mp_potential_settings(360, 45, 64, false);

// sentry AI stuff
post=noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !gameManager.constructionTimeAgain {
    if hp &lt;= 0
        active = false;
    
        
    var collision = collision_circle(x,y,sprite_width/2,obj_worldObject,false,true)
    if collision != noone {
        // move away from object
        x += lengthdir_x(1,-point_direction(x,y,collision.x,collision.y));
        y += lengthdir_y(1,-point_direction(x,y,collision.x,collision.y));
    }
    
    if showTrainerSettings {
        // move selection cursor
        var sel = trainerUI[? "sel"];
        var optionsoptions = trainerUI[? "options"]
        var icons = optionsoptions[? trainerUI[? "men"]]
        var num_icons = ds_list_size(icons);
        var cursor_targetAngle = point_direction(480,270,window_mouse_get_x(),window_mouse_get_y());
        cursor_targetAngle = clamp(360-cursor_targetAngle, 1 / num_icons * 90, (num_icons-1) / num_icons * 180 + 1 / num_icons * 90);
        cursor_targetAngle = floor(cursor_targetAngle / (180 / num_icons)) * 180 / num_icons + 1 / num_icons * 90;
        // lerp cursor for smooth animation
        sel[? "angle"] = lerp(sel[? "angle"],cursor_targetAngle, 0.25);
        sel[? "x"] = 480 + dcos(sel[? "angle"]) * 128 * sel[? "scale"];
        sel[? "y"] = 270 + dsin(sel[? "angle"]) * 128 * sel[? "scale"];
        
        // set text that displays the currently selected icon, just in case the player has no idea what symbols mean
        // nearly wrote isotype there, that's enough OMD for one day
        var selectedIcon = icons[| (cursor_targetAngle - 180 / num_icons * 0.5) / (180 / num_icons)];
        trainerUI[? "option_s"] = chr(ord(selectedIcon)-32) + string_copy(selectedIcon,2,string_length(selectedIcon)-1);
    
        // if there's a click
        if mouse_check_button_pressed(mb_left) {
            // do something depending on which icon is selected
            animateTrainerSettings = -1;
            script_execute(asset_get_index("uiScr_"+selectedIcon));
        }
    
        // animate opening UI
        if animateTrainerSettings == 1 {
            sel[? "scale"] += 0.1;
            if sel[? "scale"] &gt;= 1 {
                animateTrainerSettings = 0;
            }
        }
        // animate closing UI
        if animateTrainerSettings == -1 {
            sel[? "scale"] -= 0.1;
            if sel[? "scale"] == 0 {
                animateTrainerSettings = 0;
                showTrainerSettings = false;
                ds_map_destroy(trainerUI);
                gameManager.buildingMenuActive = false;
                obj_camera.target_x = previousCameraX;
                obj_camera.target_y = previousCameraY;
                obj_camera.target_z = previousCameraZ;
            }
        }
    } else {
    
        if targeting {
            if mouse_check_button_pressed(mb_left){
                mx = window_views_mouse_get_x();
                my = window_views_mouse_get_y();
                target = collision_circle(screen_to_world_x(mx,my),screen_to_world_y(mx,my),8,obj_poke,false,true);
                if target == noone {
                    target = instance_create(screen_to_world_x(mx,my), screen_to_world_y(mx,my), obj_target);
                    showHealthbar = true;
                    targeting = false;
                }
            }
        }
        
        if instance_mouse_press(mb_left) &amp;&amp; !gameManager.buildingMenuActive &amp;&amp; gameManager.selection == self {
            showHealthbar = false;
            showTrainerSettings = true;
            trainerUI = createTrainerSettingMap();
            animateTrainerSettings = 1;
            gameManager.buildingMenuActive = true;
            // centre camera on building
            previousCameraX = obj_camera.target_x;
            previousCameraY = obj_camera.target_y;
            previousCameraZ = obj_camera.target_z;
            obj_camera.target_x = x;
            obj_camera.target_y = y;
            obj_camera.target_z = 0.25;
        }
        
        script_execute(mode);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draw healthbar if moused over
if showHealthbar {
    if instance_mouse_over() {
        var gui_x = window_get_width()/2 + screen_x*3
        var gui_y = window_get_height()/2 + screen_y*3
        draw_healthbar(gui_x-32, gui_y-1/obj_camera.z*sprite_height-4, gui_x+32, gui_y-1/obj_camera.z*sprite_height+4, hp/maxhp*100, c_black, c_red, c_lime, 0, true, true)
    }
}

if showTrainerSettings {
    if ds_exists(trainerUI, ds_type_map) {
        var sel = trainerUI[? "sel"];
        draw_sprite_ext(ui_radialSelect, 0, sel[? "x"], sel[? "y"], sel[? "scale"], sel[? "scale"], -sel[? "angle"]-90, c_white, 1.0);
        // draw icons
        var optionsoptions = trainerUI[? "options"]
        var icons = optionsoptions[? trainerUI[? "men"]]
        var num_icons = ds_list_size(icons);
        for (var i = 0; i &lt; num_icons; i++) {
            if sprite_exists(asset_get_index("ico_"+icons[| i])) {
                draw_sprite_ext(asset_get_index("ico_"+icons[| i]),0,480 + dcos(i / num_icons * 180 + 1 / num_icons * 90) * 152 * sel[? "scale"], 270 + dsin(i / num_icons * 180 + 1 / num_icons * 90) * 152 * sel[? "scale"], sel[? "scale"], sel[? "scale"], 0, c_white, 1.0);
            } else {
                draw_sprite_ext(ui_broke,0,480 + dcos(i / num_icons * 180 + 1 / num_icons * 90) * 152 * sel[? "scale"], 270 + dsin(i / num_icons * 180 + 1 / num_icons * 90) * 152 * sel[? "scale"], sel[? "scale"], sel[? "scale"], 0, c_white, 1.0);
            }
        }
        draw_set_font(fnt_radialMenu);
        draw_text(480-string_width(trainerUI[? "option_s"])/2, 128, trainerUI[? "option_s"]);
        draw_set_font(-1);
    } else {
        show_error("Error: Building UI position map does not exist!", false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
