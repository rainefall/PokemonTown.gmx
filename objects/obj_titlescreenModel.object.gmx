<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cube</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xx = x; var yy = y;
var rad = sqrt(sqr(xx-160)+sqr(yy-90));
x = lengthdir_x(rad,point_direction(160,90,xx,yy));
y = lengthdir_y(rad,point_direction(160,90,xx,yy));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// shadow
if surface_exists(global.shadowSurface) {
    surface_set_target(global.shadowSurface);
    for (var i=0; i &lt; image_number; i++;) {     
        draw_sprite_ext(sprite_index, i, view_wview[0]/2 + x + lengthdir_x(i,drawer.lighting_angle), view_hview[0]/2 + y + lengthdir_y(i,drawer.lighting_angle), image_xscale * 1.25 *  VANISHINGPOINT/2,image_yscale * 1.25 * VANISHINGPOINT/2,image_angle,c_black,1)
    }
    surface_reset_target();
}

if surface_exists(global.objectSurface) {
    surface_set_target(global.objectSurface);
    // actual object
    for (var i=0; i &lt; image_number; i++;) {
        // "Lighting" (makes lower layers darker because it looks better)
        var color = make_colour_rgb(128 + 128*(i/image_number),128 + 128*(i/image_number),128 + 128*(i/image_number));
        
        // Perspective mode
        draw_sprite_ext(sprite_index, i, view_wview[0]/2 + x, view_hview[0]/2 + (y-i/8) - i/2,image_xscale * (i/image_number + VANISHINGPOINT)/2,image_yscale * (i/image_number + VANISHINGPOINT)/2,image_angle,color,image_alpha)
    }
    //shader_reset();
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
