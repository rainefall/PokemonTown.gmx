<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z = 1;
angle = 0;
target_direction = 0;
target_x = x;
target_y = y;
target_z = z;
move_speed = 2;
last_mouse_x = window_views_mouse_get_x();
last_mouse_y = window_views_mouse_get_y();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = lerp(x,target_x,0.25);
y = lerp(y,target_y,0.25);
z = max(lerp(z,target_z,0.25),0.1);
angle = lerp(angle,target_direction,0.1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wx = window_views_mouse_get_x(); 
wy = window_views_mouse_get_y(); 

if !gameManager.buildingMenuActive {
    // Keyboard Input (move camera around)
    if keyboard_check(ord('Q')) {
        target_direction += 2.5*move_speed
    }
    if keyboard_check(ord('E')) {
        target_direction -= 2.5*move_speed
    }
    
    // Mouse input (move camera around)
    if mouse_check_button(mb_right) {
        if wy &gt;= view_hview[0]/2 {
            angle += (wx - last_mouse_x);
            target_direction += (wx - last_mouse_x);
        } else {
            angle -= (wx - last_mouse_x);
            target_direction -= (wx - last_mouse_x);
        }
        if wx &gt;= view_wview[0]/2 {
            angle -= (wy - last_mouse_y);
            target_direction -= (wy - last_mouse_y);
        } else {
            angle += (wy - last_mouse_y);
            target_direction += (wy - last_mouse_y);
        }
    }
    if mouse_check_button(mb_middle) {
        x -= dcos(angle)*(wx - last_mouse_x)*z;
        y -= dsin(angle)*(wx - last_mouse_x)*z;
        y -= dcos(angle)*(wy - last_mouse_y)*z;
        x += dsin(angle)*(wy - last_mouse_y)*z;
        target_x -= dcos(angle)*(wx - last_mouse_x)*z;
        target_y -= dsin(angle)*(wx - last_mouse_x)*z;
        target_y -= dcos(angle)*(wy - last_mouse_y)*z;
        target_x += dsin(angle)*(wy - last_mouse_y)*z;
    }
    
    // Mouse Input (move camera up and down)
    if gameManager.buildMode {
        if !keyboard_check(vk_shift) {
            if mouse_wheel_down() {
                if z &lt; 4 {
                    z += move_speed/16;
                    target_z += move_speed/16;
                }
            }
            if mouse_wheel_up() {
                if z &gt; 0.1 {
                    z -= move_speed/16;
                    target_z -= move_speed/16;
                }
            }
        }
    } else {
        if mouse_wheel_down() {
            if z &lt; 4 {
                z += move_speed/16;
                target_z += move_speed/16;
            }
        }
        if mouse_wheel_up() {
            if z &gt; 0.1 {
                z -= move_speed/16;
                target_z -= move_speed/16;
            }
        }
    }
    
    // Keyboard Input (move camera up and down)
    if keyboard_check(ord('R')) {
        if target_z &lt; 4 {
            target_z += move_speed/64;
        }
    }
    if keyboard_check(ord('F')) {
        if target_z &gt; 0.1 {
            target_z -= move_speed/64;
        }
    }
    
    if keyboard_check(ord('D')) {
        target_x += dcos(angle)*move_speed*z;
        target_y += dsin(angle)*move_speed*z;
    }
    if keyboard_check(ord('A')) {
        target_x -= dcos(angle)*move_speed*z;
        target_y -= dsin(angle)*move_speed*z;
    }
    if keyboard_check(ord('S')) {
        target_y += dcos(angle)*move_speed*z;
        target_x -= dsin(angle)*move_speed*z;
    }
    if keyboard_check(ord('W')) {
        target_y -= dcos(angle)*move_speed*z;
        target_x += dsin(angle)*move_speed*z;
    }
    
    if !gameManager.buildMode {
        if keyboard_check_pressed(vk_lshift) {
            move_speed *= 2
        }
        if keyboard_check_released(vk_lshift) {
            move_speed /= 2
        }
    }
}

last_mouse_x = wx;
last_mouse_y = wy;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
