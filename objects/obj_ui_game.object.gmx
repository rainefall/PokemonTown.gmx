<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>minimap = surface_create(192,192);
buildwindowy = window_get_height()+88;
lower_left_text = "";
buildingbuilding = "";
cantbuildalpha = 0.0;
cantbuildreason = "";
displayedmoney = townData.money;
targetangle = 0;
paused=false;
pauseUI = 0;
animatePause = 0;
pauseindex=-1;
confirmindex=-1;
selcount=0;
gamesavedalpha=0.0;

gp_buildindex = 1;
// i hate myself
iamsureaboutthat=false;
areyousureaboutthat=false;

headsuptext="";
headsupalpha=0.0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(pauseUI, ds_type_map)
    ds_map_destroy(pauseUI);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animate error message
if cantbuildalpha &gt; 0 
    cantbuildalpha -= 0.05;
if gamesavedalpha &gt; 0
    gamesavedalpha -= 3 / room_speed;
if headsupalpha &gt; 0
    headsupalpha -= 10 / room_speed
    
// animate money counter
if townData.money &gt; displayedmoney {
    displayedmoney++;
    if townData.money &gt; displayedmoney displayedmoney++;
} else if townData.money &lt; displayedmoney {
    displayedmoney--;
    if townData.money &lt; displayedmoney displayedmoney--;
}
if !paused {
    if mouse_press_rect(mb_left,window_get_width()-32,0,window_get_width(),32) {
        gameManager.constructionTimeAgain = true;
        gameManager.buildingMenuActive = true;
        pauseUI = pauseMenuMap();
        animatePause = 1;
        paused = true;
    }
    // if building
    if gameManager.buildMode {
        if buildwindowy != window_get_height()
            buildwindowy -= 8;
        var ids = gameManager.buildingdata[? "ids"];
        // keyboard select building
        for (var i = 1; i &lt; ds_list_size(ids); i++) {
            if keyboard_check_pressed(48+i) {
                sel = gameManager.buildingdata[? ids[| i]];
                lower_left_text = sel[? "name"]+"#Cost: "+string(sel[? "cost"]);
                buildingbuilding = ids[| i];
            }
        }
        
        // gamepad select building
        if gamepad_is_connected(0) {
            if gamepad_button_check_pressed(0,gp_padl) &amp;&amp; gp_buildindex &gt; 1
                gp_buildindex--;
            if gamepad_button_check_pressed(0,gp_padr) &amp;&amp; gp_buildindex &lt; ds_list_size(ids)-1
                gp_buildindex++;
            buildingbuilding = ids[| gp_buildindex];
            sel = gameManager.buildingdata[? ids[| gp_buildindex]];
                lower_left_text = sel[? "name"]+"#Cost: "+string(sel[? "cost"]);
        }
        
        // rotate building gamepad edition
        if gamepad_button_check(0,gp_shoulderl) {
            targetangle -= 10;
        }
        if gamepad_button_check(0,gp_shoulderr) {
            targetangle += 10;
        }
          
        // mouse select building
        if window_mouse_get_y() &gt; window_get_height()-64 &amp;&amp; window_mouse_get_x() &gt; window_get_width()/2-280 &amp;&amp; window_mouse_get_x() &lt; window_get_width()/2+280 {
            var build_index = clamp(floor((window_mouse_get_x()-(window_get_width()/2-280))/48)+1, 1, ds_list_size(gameManager.buildingdata[? "ids"])-1);
            sel = gameManager.buildingdata[? ids[| build_index]];
                lower_left_text = sel[? "name"]+"#Cost: "+string(sel[? "cost"]);
            if mouse_check_button_pressed(mb_left) {
                buildingbuilding = ids[| build_index];
            }
        } else {
            if mouse_check_button_pressed(mb_right)
                buildingbuilding = 0;
            if buildingbuilding = 0
                lower_left_text = "Build Mode";
            // build time
            if mouse_check_button_pressed(mb_left) &amp;&amp; buildingbuilding != 0 {
                // if the building doesnt collide
                if !collision_circle(mouse_get_room_x(), mouse_get_room_y(), sprite_get_width(asset_get_index("spr_"+buildingbuilding))/2,obj_worldObject,false,true) {
                    var dat =gameManager.buildingdata[? buildingbuilding];
                    if townData.money - dat[? "cost"] &gt;= 0 {
                        townData.money -= dat[? "cost"];
                        var inst = instance_create(mouse_get_room_x(), mouse_get_room_y(), obj_building);
                        inst.direction = targetangle
                        inst.data = dat
                        inst.maxhp = inst.data[? "hp"];
                        inst.hp = inst.maxhp;
                        inst.sprite_index = asset_get_index("spr_"+buildingbuilding);
                        if script_exists(asset_get_index("init_"+buildingbuilding)) {
                            with inst
                                script_execute(asset_get_index("init_"+data[? "id"]));
                        }
                        // add to map of buildings
                        var objs = gameManager.saveFile[? "objects"]
                        var tempbuilding = ds_map_create();
                        tempbuilding[? "type"] = buildingbuilding;
                        tempbuilding[? "x"] = inst.x;
                        tempbuilding[? "y"] = inst.y;
                        tempbuilding[? "angle"] = targetangle;
                        tempbuilding[? "hp"] = inst.hp;
                        ds_list_add(objs,tempbuilding);
                        ds_list_mark_as_map(objs,ds_list_size(objs)-1);
                    } else {
                        // not enough money
                        cantbuildalpha = 1.0;
                        cantbuildreason = "Not enough money!";
                    }
                } else {
                    // can't build that there!
                    cantbuildalpha = 1.0;
                    cantbuildreason = "Can't build that here!";
                }
            } else if gamepad_is_connected(0) &amp;&amp; gamepad_button_check_pressed(0,gp_face3) {
                // if the building doesnt collide
                if !collision_circle(screen_to_world_x(gameManager.gp_cursorx/3,gameManager.gp_cursory/3), screen_to_world_y(gameManager.gp_cursorx/3,gameManager.gp_cursory/3), sprite_get_width(asset_get_index("spr_"+buildingbuilding))/2,obj_worldObject,false,true) {
                    var dat = gameManager.buildingdata[? buildingbuilding];
                    if townData.money - dat[? "cost"] &gt;= 0 {
                        townData.money -= dat[? "cost"];
                        var inst = instance_create(screen_to_world_x(gameManager.gp_cursorx/3,gameManager.gp_cursory/3), screen_to_world_y(gameManager.gp_cursorx/3,gameManager.gp_cursory/3), obj_building);
                        inst.direction = targetangle
                        inst.data = dat
                        inst.maxhp = inst.data[? "hp"];
                        inst.hp = inst.maxhp;
                        inst.sprite_index = asset_get_index("spr_"+buildingbuilding);
                        if script_exists(asset_get_index("init_"+buildingbuilding)) {
                            with inst
                                script_execute(asset_get_index("init_"+data[? "id"]));
                        }
                        // add to map of buildings
                        var objs = gameManager.saveFile[? "objects"]
                        var tempbuilding = ds_map_create();
                        tempbuilding[? "type"] = buildingbuilding;
                        tempbuilding[? "x"] = inst.x;
                        tempbuilding[? "y"] = inst.y;
                        tempbuilding[? "angle"] = targetangle;
                        tempbuilding[? "hp"] = inst.hp;
                        ds_list_add(objs,tempbuilding);
                        ds_list_mark_as_map(objs,ds_list_size(objs)-1);
                    } else {
                        // not enough money
                        cantbuildalpha = 1.0;
                        cantbuildreason = "Not enough money!";
                    }
                } else {
                    // can't build that there!
                    cantbuildalpha = 1.0;
                    cantbuildreason = "Can't build that here!";
                }
            }
            if keyboard_check(vk_shift) {
                if mouse_wheel_up() targetangle += 10;
                if mouse_wheel_down() targetangle -= 10;
            }
        }
    } else {
        if buildwindowy != window_get_height()+88
            buildwindowy += 8;
            
        if gameManager.selection != noone {
            lower_left_text = gameManager.selection.data[? "name"];
        }
    }
} else {
    if selcount &gt; 360
        selcount -= 360;
    selcount += 4;
    
    var options = pauseUI[? "options"]
    if areyousureaboutthat {
        // confirm the player wants to quit
        confirmindex = -1
        if window_mouse_get_y() &gt; window_get_height()/2 &amp;&amp; window_mouse_get_y() &lt; window_get_height()/2 + 24 {
            if window_mouse_get_x() &gt; window_get_width()/2-64-string_width("Yes") &amp;&amp; window_get_width()/2-64+string_width("Yes") {
                confirmindex = 0;
            }
            if window_mouse_get_x() &gt; window_get_width()/2+64-string_width("No") &amp;&amp; window_get_width()/2+64+string_width("No") {
                confirmindex = 1;
            }
            
            if mouse_check_button_pressed(mb_left) &amp;&amp; confirmindex &gt;= 0 {
                if confirmindex == 0 {
                    iamsureaboutthat = true;
                    // do something depending on which icon is selected
                    animatePause = -1;
                    script_execute(asset_get_index("uiScr_"+options[| pauseindex]));
                } else {
                    areyousureaboutthat = false;
                }
            }
        }
    } else {
        pauseindex = -1
        if window_mouse_get_x() &gt; window_get_width()/2-string_width("Load Game")*2 &amp;&amp; window_mouse_get_x() &lt; window_get_width()/2+string_width("Load Game") {
            // get index from mouse position
            for (var i = 0; i &lt;= ds_list_size(options); i++)
                if window_mouse_get_y() &gt; window_get_height()/2-26*ds_list_size(options)+i*26 pauseindex = i;
            // overflow
            if pauseindex &gt; ds_list_size(options)-1 pauseindex = -1;
            // if clicked &amp; not outside the pause options
            if pauseindex &gt;= 0 &amp;&amp; mouse_check_button_pressed(mb_left) {
                // do something depending on which icon is selected
                animatePause = -1;
                script_execute(asset_get_index("uiScr_"+options[| pauseindex]));
            }
        }
        
        if animatePause == 1 {
            pauseUI[? "alpha"] += 0.1;
            if pauseUI[? "alpha"] &gt;= 1
                animatePause = 0;
        }
        if animatePause == -1 {
            pauseUI[? "alpha"] -= 0.1;
            if pauseUI[? "alpha"] &lt;= 0 {
                animatePause = 0;
                gameManager.constructionTimeAgain = false;
                gameManager.buildingMenuActive = false;
                //obj_building.showHealthbar = true;
                //obj_trainer.showHealthbar = true;
                ds_map_destroy(pauseUI);
                paused = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(minimap) {
    // clear surface
    surface_set_target(minimap)
    draw_set_color($5CDE52);
    draw_set_alpha(1);
    draw_rectangle(0,0,192,192,false);
    draw_set_color(c_white);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw UI 
// set font
draw_set_font(fnt_ui);

// gamepad cursor
if gamepad_is_connected(0) &amp;&amp; !gameManager.buildMode {
    draw_sprite_ext(ui_gpCursor,0,gameManager.gp_cursorx,gameManager.gp_cursory,2,2,0,c_white,1);
}

// boxes
draw_sprite(ui_pause, 0, window_get_width(), 0);
draw_sprite(ui_lower_left, 0, 0, window_get_height());
//draw_sprite(ui_lower_right, 0, window_get_width(), window_get_height());
draw_sprite(ui_top_left, 0, 0, 0);

// money
draw_text_transformed(4, 4, "$"+string(displayedmoney), 2, 2, 0);

// minimap
if surface_exists(minimap) {
    // draw minimap
    //draw_surface(minimap, window_get_width()-196, window_get_height()-196);
}
// lower left text
draw_text_transformed(4, window_get_height() - 156, lower_left_text, 2, 2, 0);

// build menu
var ids = gameManager.buildingdata[? "ids"]
draw_sprite(ui_construction, 0, window_get_width()/2, buildwindowy);
for (var i = 1; i &lt; ds_list_size(ids); i++) {
    draw_model(asset_get_index("spr_"+ids[| i]), window_get_width()/2-280+24+(48*(i-1)), buildwindowy-16, 45, 2);
}
// can't build that!
draw_set_alpha(cantbuildalpha);
draw_text(window_mouse_get_x()-string_width(cantbuildreason)/2, window_mouse_get_y()-12, cantbuildreason);

draw_set_halign(fa_center);
draw_set_alpha(clamp(headsupalpha,0.0,1.0)*dsin(get_timer()/10000));
draw_text_ext_transformed(window_get_width()/2,4,headsuptext,-1,256,2,2,0);
draw_set_alpha(1);
draw_set_halign(fa_left);

// pause menu
if paused &amp;&amp; ds_exists(pauseUI, ds_type_map) {
    // overlay
    draw_set_alpha(pauseUI[? "alpha"]/2);
    draw_set_color(c_black);
    draw_rectangle(0,0,window_get_width(),window_get_height(),false);
    draw_set_alpha(pauseUI[? "alpha"]);
    draw_set_color(c_white);
    
    if areyousureaboutthat {
        draw_text_transformed(window_get_width()/2-string_width("Are you sure you want to exit?#Unsaved progress will be lost!"),window_get_height()/2-64,"Are you sure you want to exit?#Unsaved progress will be lost!",2,2,0);
        draw_text_transformed(window_get_width()/2-64-string_width("Yes"),window_get_height()/2,"Yes",2,2,0);
        draw_text_transformed(window_get_width()/2+64-string_width("No"),window_get_height()/2,"No",2,2,0);
        if confirmindex &gt;= 0
            draw_sprite(ui_sel,0,window_get_width()/2-64+string_width("Yes")+8+dsin(selcount)*4+128*confirmindex,window_get_height()/2+6);
    } else {
        var options = pauseUI[? "options"];
        for (var i = 0; i &lt; ds_list_size(options); i++) {
            var txt = chr(ord(options[| i])-32) + string_copy(options[| i],2,string_length(options[| i])-1);
            draw_text_transformed(window_get_width()/2-string_width(txt), window_get_height()/2-26*ds_list_size(options)+i*26, txt, 2, 2, 1);
        }
        
        if pauseindex &gt;= 0
            draw_sprite(ui_sel,0,window_get_width()/2+string_width(options[| pauseindex])+8+dsin(selcount)*4,window_get_height()/2-26*ds_list_size(options)+pauseindex*26+6);
    }
    
    if gamesavedalpha &gt; 0 {
        draw_set_alpha(clamp(gamesavedalpha,0,1));
        draw_text_transformed(window_get_width()/2-string_width("Game saved!")*1.5,window_get_height()/2+96,"Game saved!",3,3,0);
    }        

    draw_set_alpha(1);
}

//reset font
draw_set_font(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ghost building
if gameManager.buildMode {
    if buildingbuilding != 0 {
        if gamepad_is_connected(0) {
            draw_model_perspective(asset_get_index("spr_"+buildingbuilding),gameManager.gp_cursorx/3,gameManager.gp_cursory/3,targetangle,1,0.5);
       } else {
            draw_model_perspective(asset_get_index("spr_"+buildingbuilding),window_views_mouse_get_x(),window_views_mouse_get_y(),targetangle,1,0.5);
       } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
