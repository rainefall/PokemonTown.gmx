<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>minimap = surface_create(192,192);
buildwindowy = window_get_height()+88;
lower_left_text = "";
buildingbuilding = "";
cantbuildalpha = 0.0;
cantbuildreason = "";
displayedmoney = townData.money;
targetangle = 0;
paused=false;
pauseUI = 0;
animatePause = 0;
pauseindex=-1;
selcount=0;
// i hate myself
iamsureaboutthat=false;
areyousureaboutthat=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(pauseUI, ds_type_map)
    ds_map_destroy(pauseUI);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animate error message
if cantbuildalpha &gt; 0 {
    cantbuildalpha -= 0.05;
}
// animate money counter
if townData.money &gt; displayedmoney {
    displayedmoney++;
    if townData.money &gt; displayedmoney displayedmoney++;
} else if townData.money &lt; displayedmoney {
    displayedmoney--;
    if townData.money &lt; displayedmoney displayedmoney--;
}
if !paused {
    if mouse_press_rect(mb_left,window_get_width()-32,0,window_get_width(),32) {
        gameManager.constructionTimeAgain = true;
        gameManager.buildingMenuActive = true;
        pauseUI = pauseMenuMap();
        animatePause = 1;
        paused = true;
    }
    // if building
    if gameManager.buildMode {
        if buildwindowy != window_get_height()
            buildwindowy -= 8;
        var ids = gameManager.buildingdata[? "ids"];
        // keyboard select building
        for (var i = 1; i &lt; ds_list_size(ids); i++) {
            if keyboard_check_pressed(48+i) {
                sel = gameManager.buildingdata[? ids[| i]];
                lower_left_text = sel[? "name"];
                buildingbuilding = ids[| i];
            }
        }
        // mouse select building
        if window_mouse_get_y() &gt; window_get_height()-64 &amp;&amp; window_mouse_get_x() &gt; 200 &amp;&amp; window_mouse_get_x() &lt; 760 {
            var build_index = clamp(floor((window_mouse_get_x()-200)/48)+1, 1, ds_list_size(gameManager.buildingdata[? "ids"])-1);
            sel = gameManager.buildingdata[? ids[| build_index]];
            lower_left_text = sel[? "name"];
            if mouse_check_button_pressed(mb_left) {
                buildingbuilding = ids[| build_index];
            }
        } else {
            if buildingbuilding = 0
                lower_left_text = "Build Mode";
            // build time
            if mouse_check_button_pressed(mb_left) {
                // if the building doesnt collide
                if !collision_circle(mouse_get_room_x(), mouse_get_room_y(), sprite_get_width(asset_get_index("spr_"+buildingbuilding))/2,obj_worldObject,false,true) {
                    var dat =gameManager.buildingdata[? buildingbuilding];
                    if townData.money - dat[? "cost"] &gt;= 0 {
                        townData.money -= dat[? "cost"];
                        var inst = instance_create(mouse_get_room_x(), mouse_get_room_y(), obj_building);
                        inst.direction = targetangle
                        inst.data = dat
                        inst.maxhp = inst.data[? "hp"];
                        inst.hp = inst.maxhp;
                        inst.sprite_index = asset_get_index("spr_"+buildingbuilding);
                        if script_exists(asset_get_index("init_"+buildingbuilding)) {
                            with inst
                                script_execute(asset_get_index("init_"+data[? "id"]));
                        }
                        // add to map of buildings
                        var objs = gameManager.saveFile[? "objects"]
                        var tempbuilding = ds_map_create();
                        tempbuilding[? "type"] = buildingbuilding;
                        tempbuilding[? "x"] = inst.x;
                        tempbuilding[? "y"] = inst.y;
                        tempbuilding[? "angle"] = targetangle;
                        tempbuilding[? "hp"] = inst.hp;
                        ds_list_add(objs,tempbuilding);
                        ds_list_mark_as_map(objs,ds_list_size(objs)-1);
                    } else {
                        // not enough money
                        cantbuildalpha = 1.0;
                        cantbuildreason = "Not enough money!";
                    }
                } else {
                    // can't build that there!
                    cantbuildalpha = 1.0;
                    cantbuildreason = "Can't build that here!";
                }
            }
            if keyboard_check(vk_shift) {
                if mouse_wheel_up() targetangle += 10;
                if mouse_wheel_down() targetangle -= 10;
            }
        }
    } else {
        if buildwindowy != window_get_height()+88
            buildwindowy += 8;
            
        if gameManager.selection != noone {
            lower_left_text = gameManager.selection.data[? "name"];
        }
    }
} else {
    if selcount &gt; 360
        selcount -= 360;
    selcount += 4;
    
    var icons = pauseUI[? "options"]
    var num_icons = ds_list_size(icons);
    if areyousureaboutthat {
        // confirm the player wants to quit
    } else {
        pauseindex = -1
        if window_mouse_get_x() &gt; 480-string_width("Load Game")*2 &amp;&amp; window_mouse_get_x() &lt; 480+string_width("Load Game") {
            // get index from mouse position
            for (var i = 0; i &lt;= ds_list_size(options); i++)
                if window_mouse_get_y() &gt; window_get_height()/2-26*ds_list_size(options)+i*26 pauseindex = i;
            // overflow
            if pauseindex &gt; ds_list_size(options)-1 pauseindex = -1;
            // if clicked &amp; not outside the pause options
            if pauseindex &gt;= 0 &amp;&amp; mouse_check_button_pressed(mb_left) {
                // do something depending on which icon is selected
                animatePause = -1;
                script_execute(asset_get_index("uiScr_"+pauseindex));
            }
        }
        
        if animatePause == 1 {
            pauseUI[? "alpha"] += 0.1;
            if pauseUI[? "alpha"] &gt;= 1
                animatePause = 0;
        }
        if animatePause == -1 {
            pauseUI[? "alpha"] -= 0.1;
            if pauseUI[? "alpha"] &lt;= 0 {
                animatePause = 0;
                gameManager.constructionTimeAgain = false;
                gameManager.buildingMenuActive = false;
                obj_building.showHealthbar = true;
                obj_trainer.showHealthbar = true;
                ds_map_destroy(pauseUI);
                paused = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw UI 
// set font
draw_set_font(fnt_ui);
// boxes
draw_sprite(ui_pause, 0, 960, 0);
draw_sprite(ui_lower, 0, 0, 540);
draw_sprite(ui_top_left, 0, 0, 0);

// money
draw_text_transformed(4, 4, "$"+string(displayedmoney), 2, 2, 0);

// minimap
if surface_exists(minimap) {
    draw_surface(minimap, 764, 344);
    surface_set_target(minimap)
    draw_set_color($5CDE52);
    draw_set_alpha(1);
    draw_rectangle(0,0,192,192,false);
    draw_set_color(c_white);
    surface_reset_target();
}
// lower left text
draw_text_transformed(4, 540 - 156, lower_left_text, 2, 2, 0);

// build menu
var ids = gameManager.buildingdata[? "ids"]
draw_sprite(ui_construction, 0, window_get_width()/2, buildwindowy);
for (var i = 1; i &lt; ds_list_size(ids); i++) {
    draw_model(asset_get_index("spr_"+ids[| i]), 224+(48*(i-1)), buildwindowy-16, 45, 2);
}
// can't build that!
draw_set_alpha(cantbuildalpha);
draw_text(window_mouse_get_x()-string_width(cantbuildreason)/2, window_mouse_get_y()-12, cantbuildreason);
draw_set_alpha(1);

// pause menu
if paused &amp;&amp; ds_exists(pauseUI, ds_type_map) {
    var options = pauseUI[? "options"];
    // overlay
    draw_set_alpha(pauseUI[? "alpha"]/2);
    draw_set_color(c_black);
    draw_rectangle(0,0,window_get_width(),window_get_height(),false);
    draw_set_alpha(pauseUI[? "alpha"]);
    draw_set_color(c_white);
    
    for (var i = 0; i &lt; ds_list_size(options); i++) {
        var txt = chr(ord(options[| i])-32) + string_copy(options[| i],2,string_length(options[| i])-1);
        draw_text_transformed(window_get_width()/2-string_width(txt), window_get_height()/2-26*ds_list_size(options)+i*26, txt, 2, 2, 1);
    }
    
    if pauseindex &gt;= 0
        draw_sprite(ui_sel,0,window_get_width()/2+string_width(options[| pauseindex])+4+dsin(selcount)*4,window_get_height()/2-26*ds_list_size(options)+pauseindex*26);
    
    draw_set_alpha(1);
}

//reset font
draw_set_font(-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ghost building
if gameManager.buildMode {
    if buildingbuilding != 0 {
        draw_model_perspective(asset_get_index("spr_"+buildingbuilding),window_views_mouse_get_x(),window_views_mouse_get_y(),targetangle,1,0.5);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
