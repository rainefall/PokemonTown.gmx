<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_3DObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
maxhp=-1;
hp=maxhp;
data=0

moving = false;
demolishing=false;

// ui settings
showHealthbar = true;
showBuildingSettings = false;
animateBuildingSettings = 0;
buildingUI = 0;
previousCameraAngle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(buildingUI, ds_type_map) {
    ds_map_destroy(buildingUI);
}
if script_exists(asset_get_index("destroy_"+data[? "id"]))
    script_execute(asset_get_index("destroy_"+data[? "id"]));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// demolition
// demolition time!!!!!!!!!1
if demolishing &amp;&amp; !showBuildingSettings
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if hp &gt; maxhp {
    hp = maxhp;
}
if hp &lt; 0 {
    instance_destroy();
}

// visuals
if showBuildingSettings {
    // move selection cursor
    var sel = buildingUI[? "sel"];
    var icons = buildingUI[? "options"]
    var num_icons = ds_list_size(icons);
    var cursor_targetAngle = point_direction(480,270,window_mouse_get_x(),window_mouse_get_y());
    cursor_targetAngle = clamp(360-cursor_targetAngle, 1 / num_icons * 90, (num_icons-1) / num_icons * 180 + 1 / num_icons * 90);
    cursor_targetAngle = floor(cursor_targetAngle / (180 / num_icons)) * 180 / num_icons + 1 / num_icons * 90;
    // lerp cursor for smooth animation
    sel[? "angle"] = lerp(sel[? "angle"],cursor_targetAngle, 0.25);
    sel[? "x"] = 480 + dcos(sel[? "angle"]) * 128 * sel[? "scale"];
    sel[? "y"] = 270 + dsin(sel[? "angle"]) * 128 * sel[? "scale"];
    
    // set text that displays the currently selected icon, just in case the player has no idea what symbols mean
    // nearly wrote isotype there, that's enough OMD for one day
    var selectedIcon = icons[| (cursor_targetAngle - 180 / num_icons * 0.5) / (180 / num_icons)];
    buildingUI[? "option_s"] = chr(ord(selectedIcon)-32) + string_copy(selectedIcon,2,string_length(selectedIcon)-1);
    
    
    // if there's a click
    if mouse_check_button_pressed(mb_left) {
        // do something depending on which icon is selected
        animateBuildingSettings = -1;
        script_execute(asset_get_index("uiScr_"+selectedIcon));
    }
    
    // animate opening UI
    if animateBuildingSettings == 1 {
        sel[? "scale"] += 0.1;
        if sel[? "scale"] &gt;= 1 {
            animateBuildingSettings = 0;
        }
    }
    // animate closing UI
    if animateBuildingSettings == -1 {
        sel[? "scale"] -= 0.1;
        if sel[? "scale"] == 0 {
            animateBuildingSettings = 0;
            showBuildingSettings = false;
            showHealthbar = true;
            ds_map_destroy(buildingUI);
            gameManager.buildingMenuActive = false;
            obj_camera.target_x = previousCameraX;
            obj_camera.target_y = previousCameraY;
            obj_camera.target_z = previousCameraZ;
        }
    }
}
    
// controls
if moving {
    if instance_mouse_press(mb_left) {
        gameManager.constructionTimeAgain = false;
        moving = false
        showHealthbar = true;
    }
    // move to where the mouse pointer is
    x = screen_to_world_x(window_views_mouse_get_x(), window_views_mouse_get_y());
    y = screen_to_world_y(window_views_mouse_get_x(), window_views_mouse_get_y());
} else if !gameManager.buildMode {
    // show building settings?
    if instance_mouse_press(mb_left) &amp;&amp; !gameManager.buildingMenuActive &amp;&amp; gameManager.selection == self {
        showHealthbar = false;
        showBuildingSettings = true;
        buildingUI = createBuildingUIMap();
        animateBuildingSettings = 1;
        gameManager.buildingMenuActive = true;
        // centre camera on building
        previousCameraX = obj_camera.target_x;
        previousCameraY = obj_camera.target_y;
        previousCameraZ = obj_camera.target_z;
        obj_camera.target_x = x;
        obj_camera.target_y = y;
        obj_camera.target_z = 0.5;
    }
    if script_exists(asset_get_index("step_"+data[? "id"]))
        script_execute(asset_get_index("step_"+data[? "id"]));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gui_x = window_get_width()/2 + screen_x*3
var gui_y = window_get_height()/2 + screen_y*3
// draw healthbar if moused over
if showHealthbar &amp;&amp; !obj_ui_game.paused {
    if instance_mouse_over() {
        draw_healthbar(gui_x-32, gui_y-1/obj_camera.z*sprite_height*3-4, gui_x+32, gui_y-1/obj_camera.z*sprite_height*3+4, hp/maxhp*100, c_black, c_red, c_lime, 0, true, true)
    }
}

if gameManager.selection == self &amp;&amp; !showBuildingSettings {
    texture_set_interpolation(true);
    var scale = (sprite_get_width(sprite_index)*3) / sprite_get_width(ui_crosshair) * 1/obj_camera.z + (sin(gameManager.tick/16)/16)
    draw_sprite_ext(ui_crosshair,0,gui_x,gui_y,scale,scale,0,c_white,1.0);
    texture_set_interpolation(false);
}

// show building menu
if showBuildingSettings {
    if ds_exists(buildingUI, ds_type_map) {
        var sel = buildingUI[? "sel"];
        draw_sprite_ext(ui_radialSelect, 0, sel[? "x"], sel[? "y"], sel[? "scale"], sel[? "scale"], -sel[? "angle"]-90, c_white, 1.0);
        // draw icons
        var icons = buildingUI[? "options"];
        var num_icons = ds_list_size(icons);
        for (var i = 0; i &lt; num_icons; i++) {
            draw_sprite_ext(asset_get_index("ico_"+icons[| i]),0,480 + dcos(i / num_icons * 180 + 1 / num_icons * 90) * 152 * sel[? "scale"], 270 + dsin(i / num_icons * 180 + 1 / num_icons * 90) * 152 * sel[? "scale"], sel[? "scale"], sel[? "scale"], 0, c_white, 1.0);
        }
        draw_set_font(fnt_ui);
        draw_text_transformed(480-string_width(buildingUI[? "option_s"])*1.5, 128, buildingUI[? "option_s"],3,3,0);
        draw_set_font(-1);
    } else {
        show_error("Error: Building UI position map does not exist!", false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
