<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_3DObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
aim = 0;
target_cam_direction = 0;
cam_direction = 0;
screen_dir=0;
hp = 100;
move_speed = 2;
weapon = wep_semiAutoPistol;
inventory = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_x = world_to_screen_x(x,y)
screen_y = world_to_screen_y(x,y)
depth = -screen_y;
image_angle = - direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Keyboard Input (move player)
if keyboard_check(ord('W')) {
    screen_dir = point_direction(0,0,keyboard_axis_x(),keyboard_axis_y());
    if !place_meeting(x+dsin(obj_camera.angle)*4,y,obj_worldObject) {
        x += dsin(obj_camera.angle)*move_speed;
    }
    if !place_meeting(x,y-dcos(obj_camera.angle)*4,obj_worldObject) {
        y -= dcos(obj_camera.angle)*move_speed;
    }
}
if keyboard_check(ord('S')) {
    screen_dir = point_direction(0,0,keyboard_axis_x(),keyboard_axis_y());
    if !place_meeting(x-dsin(obj_camera.angle)*4,y,obj_worldObject) {
        x -= dsin(obj_camera.angle)*move_speed;
    }
    if !place_meeting(x,y+dcos(obj_camera.angle)*4,obj_worldObject) {
        y += dcos(obj_camera.angle)*move_speed;
    }
}
if keyboard_check(ord('A')) {
    screen_dir = point_direction(0,0,keyboard_axis_x(),keyboard_axis_y());
    if !place_meeting(x-dcos(obj_camera.angle)*4,y,obj_worldObject) {
        x -= dcos(obj_camera.angle)*move_speed;
    }
    if !place_meeting(x,y-dsin(obj_camera.angle)*4,obj_worldObject) {
        y -= dsin(obj_camera.angle)*move_speed;
    }
}
if keyboard_check(ord('D')) {
    screen_dir = point_direction(0,0,keyboard_axis_x(),keyboard_axis_y());
    if !place_meeting(x+dcos(obj_camera.angle)*4,y,obj_worldObject) {
        x += dcos(obj_camera.angle)*move_speed;
    }
    if !place_meeting(x,y+dsin(obj_camera.angle)*4,obj_worldObject) {
        y += dsin(obj_camera.angle)*move_speed;
    }
}

aim = point_direction(window_get_width()/2,window_get_height()/2,window_mouse_get_x(),window_mouse_get_y());

if keyboard_check(vk_escape) {
    game_end();
}

var inst = instance_place(x,y,obj_collisionEvent) 
if inst != noone {
    script_execute(inst.event,inst.arg0)
}

// Weapon Logic
script_execute(weapon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(inventory);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(16, window_get_height()-24, "HP: " + string(hp));
var inst = instance_place(x,y,obj_collisionEvent) 
if inst != noone {
    draw_text(view_wview[0]/2 + screen_x - string_width(inst.tooltip)/2, view_hview[0]/2 + screen_y - 64, inst.tooltip);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
