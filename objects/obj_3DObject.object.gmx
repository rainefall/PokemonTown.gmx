<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cube</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_worldObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
screen_dir = obj_camera.angle - direction;
image_angle = direction;

//Get uniforms
u_ht = shader_get_uniform(shd_lighting3D, "pixelH"); 
u_width = shader_get_uniform(shd_lighting3D, "pixelW");
u_lightDir = shader_get_uniform(shd_lighting3D, "lightDirection");
u_depth = shader_get_uniform(shd_lighting3D, "depth");
u_nmap = shader_get_sampler_index(shd_lighting3D, "normalMap");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
screen_dir = obj_camera.angle - direction;
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if screen_x - sprite_width * 1/obj_camera.z * image_xscale &lt; view_wview[0]/2 and screen_x + sprite_width * 1/obj_camera.z * image_xscale &gt; -view_wview[0]/2 and screen_y - sprite_height * image_number * 1/obj_camera.z &lt; view_hview[0]/2 and screen_y + sprite_height * 1/obj_camera.z &gt; -view_hview[0]/2 {
    // shadow
    if surface_exists(global.shadowSurface) {
        surface_set_target(global.shadowSurface);
        for (var i=0; i &lt; image_number; i++;) {     
            draw_sprite_ext(sprite_index, i, view_wview[0]/2 + screen_x + lengthdir_x(i,drawer.lighting_angle+obj_camera.angle) * 1/obj_camera.z, view_hview[0]/2 + screen_y + lengthdir_y(i,drawer.lighting_angle+obj_camera.angle) * 1/obj_camera.z, image_xscale * 1.25 *  VANISHINGPOINT/2 * 1/obj_camera.z,image_yscale * 1.25 * VANISHINGPOINT/2 * 1/obj_camera.z,screen_dir,c_black,1)
        }
        surface_reset_target();
    }
    
    if surface_exists(global.objectSurface) {
        surface_set_target(global.objectSurface);
        /*
        shader_set(shd_lighting3D);
        texture_set_stage(u_nmap,sprite_get_texture(spr_cube_normals,i));
        shader_set_uniform_i(u_depth, i);
        shader_set_uniform_f(u_ht, 1/sprite_get_height(sprite_index));
        shader_set_uniform_f(u_width, 1/sprite_get_width(sprite_index));
        shader_set_uniform_f(u_lightDir, 1.0, 0.0, -1.0,);
        */
        // actual object
        for (var i=0; i &lt; image_number; i++;) {
            // "Lighting" (makes lower layers darker because it looks better)
            var color = make_colour_rgb(128 + 128*(i/image_number),128 + 128*(i/image_number),128 + 128*(i/image_number));
            
            // Perspective mode
            draw_sprite_ext(sprite_index, i, view_wview[0]/2 + screen_x * (i/256/obj_camera.z+1), view_hview[0]/2 + (screen_y-i/8) * (i/256/obj_camera.z+1) - i/(2*obj_camera.z),image_xscale * (i/image_number + VANISHINGPOINT)/2 * 1/obj_camera.z,image_yscale * (i/image_number + VANISHINGPOINT)/2 * 1/obj_camera.z,screen_dir,color,image_alpha)
        }
        //shader_reset();
        surface_reset_target();
    }
}

if surface_exists(obj_ui_game.minimap) {
    surface_set_target(obj_ui_game.minimap);
    draw_circle_color(x*192/room_width,y*192/room_height,2,c_black,c_white,false);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
