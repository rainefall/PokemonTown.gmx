<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_w = window_get_width();
window_h = window_get_height();

lighting_angle = 315;
global.objectSurface = surface_create(window_get_width()/3,window_get_height()/3);
global.shadowSurface = surface_create(window_get_width()/3,window_get_height()/3);

//Get 'uniform's for 'shd_outline'
u_ht = shader_get_uniform(shd_outline, "pixelH"); 
u_width = shader_get_uniform(shd_outline, "pixelW");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if window_h != window_get_height() || window_w != window_get_height() {
    window_w = max(window_get_width(),3);
    window_h = max(window_get_height(),3);
    // free surfaces
    surface_free(global.objectSurface);
    surface_free(global.shadowSurface);
    surface_resize(application_surface,window_w,window_h);
    global.objectSurface = surface_create(window_w/3,window_h/3);
    global.shadowSurface = surface_create(window_w/3,window_h/3);
    if view_enabled {
        view_wview[0] = window_w/3;
        view_hview[0] = window_h/3;
        view_wport[0] = window_w;
        view_hport[0] = window_h;
    }
    
    if room == rm_game {
        if gameManager.buildMode {
            obj_ui_game.buildwindowy = window_h;
        } else {
            obj_ui_game.buildwindowy = window_h+88;
        }
        
        if surface_exists(obj_ui_game.minimap) {
            surface_free(obj_ui_game.minimap);
            obj_ui_game.minimap = surface_create(192,192);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if surface_exists(global.shadowSurface) &amp;&amp; gameManager.settings[? "shadows"] {
    surface_set_target(global.shadowSurface);
    draw_clear_alpha(c_white,0);
    surface_reset_target();
}
if surface_exists(global.objectSurface){
    surface_set_target(global.objectSurface);
    draw_clear_alpha(c_black,0);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rm_game {
    if surface_exists(global.shadowSurface) &amp;&amp; gameManager.settings[? "shadows"]
        draw_surface_ext(global.shadowSurface,0,0,1,1,0,c_white,0.5); // draw shadows slightly transparent
    if surface_exists(global.objectSurface) {
        shader_set(shd_outline); 
        shader_set_uniform_f(u_ht, 1/surface_get_height(global.objectSurface)); 
        shader_set_uniform_f(u_width, 1/surface_get_width(global.objectSurface));
        draw_surface_ext(global.objectSurface,0,0,1,1,0,c_white,1); // draw objects
        shader_reset();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
